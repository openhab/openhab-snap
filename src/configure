#!/bin/bash

set -x

exec >> $SNAP_COMMON/configure-hook.log 2>&1
echo "$(date '+%Y-%m-%d %H:%M:%S') configure-hook: Entering hook"

# configure hook can be also run as part of install/update, migrate data if needed here, use
# version key to track state
VERSION=$(snapctl get version)
# handle bug when snap uninstall will not clear value of 'version' key
if [ "x$VERSION" == "x$SNAP_VERSION" ] && [ -d $SNAP_DATA/userdata ]; then
    echo "Handle config change"
    # read openhab config
    . $SNAP/bin/config
    # settings were altered by user, safest way to get them applied is to restart service

    # TODO: remove this workaround once it's not needed
    # for the moment we can't read settings outside of the hook,
    # so store all settings in helpper script which is then picked by main wrapper
    echo -e "#!/bin/sh\n" > $SETTINGS_FILE
    for key in ${keys[@]}
    do
      if value=$(snapctl get $key); then
          echo "export $key='$value'" >> $SETTINGS_FILE
      elif [ -d "${!key}" ]; then
          # store back value from SETTINGS_FILE
          echo "export $key='${!key}'" >> $SETTINGS_FILE
      fi
    done

    # set file executable
    chmod 755 $SETTINGS_FILE
    # we can't use snapctl to restart service, may be one day ....
    echo "Setting has been updated, restart service. $ sudo openhab.stop"
else
    # we have three potential screnarios, fresh install/update/rollback
    if [ -d $SNAP_DATA/userdata ]; then
        echo "detected rollback : doing nothing"
        # this is potentially rollback, we better do nothing
    else
        if [ "x$VERSION" != "x" ] || [ ! -d $(dirname $SNAP_DATA)/$VERSION/userdata ]; then
            # this is fresh install or previus version has no userdata
            echo "detected fresh install or missing previous user data, populate with fresh one"
            cp -rf $SNAP/userdata $SNAP_DATA/
            cp -rf $SNAP/conf $SNAP_DATA/
        else
            # this is update: migrate data from previous version, minus cache, tmp
            echo "detected udpate: migrate data"
            shopt -s dotglob; rm -rf $(dirname $SNAP_DATA)/$VERSION/userdata/cache/*
            shopt -s dotglob; rm -rf $(dirname $SNAP_DATA)/$VERSION/userdata/tmp/*
            cp -rT $(dirname $SNAP_DATA)/$VERSION $SNAP_DATA
            cp -r -n $SNAP/userdata/etc $SNAP_DATA/userdata/
            cp -r -n $SNAP/conf/services $SNAP_DATA/conf
            # add here more custom migration steps
        fi
    fi
    snapctl set version=$SNAP_VERSION
fi
