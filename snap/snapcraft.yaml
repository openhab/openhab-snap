name: openhab
summary: openHAB smart home server
description: |
 openHAB - a vendor and technology agnostic open source automation software for your home.
 An image of Ubuntu Core with some USB items added to the gadget snap is available at
 http://people.canonical.com/~okubik/openhab/
 If you would like to add a USB controller or other device, please raise an issue at git
 https://github.com/openhab/openhab-snap/
 webgui is available at user defined port(default is 8080 for http and 8443 for https)
 http://<snap device address>:{specified http port}
 https:///<snap device address>:{specified https port}
 Port settings can be altered by user, refer to:
 $ openhab.help

confinement: strict
grade: stable
adopt-info: openhab
base: core20

architectures:
    - build-on: armhf
    - build-on: arm64
    - build-on: amd64

environment:
    JAVA_HOME:        ${SNAP}
    PATH:             ${SNAP}/usr/sbin:${SNAP}/usr/bin:${SNAP}/sbin:${SNAP}/bin:${PATH}
    LD_LIBRARY_PATH:  ${SNAP_LIBRARY_PATH}:${LD_LIBRARY_PATH}:${SNAP}/lib:${SNAP}/usr/lib:${SNAP}/lib/${SNAPCRAFT_ARCH_TRIPLET}:${SNAP}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}
    OPENHAB_CONF:     ${SNAP_DATA}/conf
    OPENHAB_RUNTIME:  ${SNAP}/runtime
    OPENHAB_USERDATA: ${SNAP_DATA}/userdata
    OPENHAB_LOGDIR:   ${SNAP_DATA}/userdata/logs
    OPENHAB_BACKUPS:  ${SNAP_COMMON}/backups

hooks:
    configure:
      plugs:
          - network
          - network-bind
    post-refresh:
      plugs:
          - network

apps:
    openhab:
        adapter: none
        command-chain:
            - bin/read-config
        command: runtime/bin/karaf server
        stop-command: runtime/bin/stop
        daemon: simple
        plugs:
            - home
            - network
            - network-bind
            - mount-observe
            - system-observe
            - serial-port
            - raw-usb
            - gpio
            - spi
            - i2c

    start:
        adapter: none
        command-chain:
            - bin/read-config
        command: runtime/bin/karaf
        plugs:
            - home
            - network
            - network-bind
            - mount-observe
            - system-observe
            - serial-port
            - raw-usb
            - gpio
            - spi
            - i2c

    karaf:
        adapter: none
        command-chain:
            - bin/read-config
        command: runtime/bin/karaf
        plugs:
            - home
            - network
            - network-bind
            - mount-observe
            - system-observe
            - serial-port
            - raw-usb
            - gpio
            - spi
            - i2c

    status:
        adapter: none
        command-chain:
            - bin/read-config
        command: runtime/bin/status
        plugs:
            - network

    stop:
        adapter: none
        command-chain:
            - bin/read-config
        command: runtime/bin/stop
        plugs:
            - network

    client:
        adapter: none
        command-chain:
            - bin/read-config
        command: runtime/bin/client
        plugs:
            - network

    backup:
        adapter: none
        command-chain:
            - bin/read-config
        command: runtime/bin/backup
        plugs:
            - home

    restore:
        adapter: none
        command-chain:
            - bin/read-config
        command: runtime/bin/restore
        plugs:
            - home

    help:
        command: bin/openhab-help
        adapter: none

    influxd:
        adapter: full
        command-chain:
            - bin/read-config
        command: bin/influxd
        daemon: simple
        restart-condition: always
        plugs:
            - network-bind
            - network
        environment:
            INFLUXDB_CONFIG_PATH: $SNAP_DATA/conf/influxdb.conf

    influx-setup:
        adapter: full
        command-chain:
            - bin/read-config
        command: bin/influx-setup
        daemon: oneshot
        plugs:
            - network

    influx:
        adapter: full
        command-chain:
            - bin/read-config
        command: bin/influx-run-client
        plugs:
            - network

parts:
    openhab:
        # source only as trigger build whenever something changes in openHAB repo
        source: https://github.com/openhab/openhab-addons.git
        plugin: nil
        stage:
          - -start*
          - -runtime/bin/*.bat
        organize:
          LICENSE: LICENSE_OPENHAB
        override-pull: |
            # if beta is closed, check edge
            for ch in "beta" "edge"; do
                last_released_tag="$(snap info ${SNAPCRAFT_PROJECT_NAME} | grep "latest/${ch}" | awk '{ print $2 }')"
                if [ -n "${last_released_tag}" ] && [ ! "${last_released_tag}" = "^" ]; then
                    break
                fi
            done
            # if candidate is close, go to beta -> edge
            for ch in "candidate" "beta" "edge"; do
                last_candidate_tag="$(snap info ${SNAPCRAFT_PROJECT_NAME} | grep "latest/${ch}" | awk '{ print $2 }')"
                if [ -n "${last_candidate_tag}" ] && [ ! "${last_candidate_tag}" = "^" ]; then
                    break
                fi
            done
            wget -O release-metadata.xml \
                 https://openhab.jfrog.io/artifactory/libs-release-local/org/openhab/distro/openhab/maven-metadata.xml
            wget -O milestone-metadata.xml \
                 https://openhab.jfrog.io/openhab/libs-milestone-local/org/openhab/distro/openhab/maven-metadata.xml
            milestone_version="$(xmllint --xpath "string(//latest)" milestone-metadata.xml)"
            latest_version="$(xmllint --xpath "string(//latest)" release-metadata.xml)"
            # first we check for milestone in candidate, then if we have latest release version in beta
            echo "last_released_tag=${last_released_tag}, last_candidate_tag=${last_candidate_tag}, " \
                 "latest_version=${latest_version}, milestone_version=${milestone_version}"
            # compare main version of milestore release to candidate version e.g. 3.0.0.RC2 -> 3.0.0,
            # since 3.0.0.RC2 is otherwise consideted as newer then final 3.0.0, which would be wrong
            if $(dpkg --compare-versions "${latest_version}" "lt" "$(echo ${milestone_version} | cut -c -5)") && \
               [ "${last_candidate_tag}" != "${milestone_version}" ]; then
               echo "Building latest milestone version: ${milestone_version}"
               wget --quiet \
                    -O openhab-milestone.tar.gz \
                    https://openhab.jfrog.io/openhab/libs-milestone-local/org/openhab/distro/openhab/${milestone_version}/openhab-${milestone_version}.tar.gz
            elif [ "${latest_version}" != "${last_released_tag}" ]; then
               echo "Building latest release version: ${latest_version}"
               wget --quiet \
                    -O openhab-release.tar.gz \
                    https://openhab.jfrog.io/artifactory/libs-release-local/org/openhab/distro/openhab/${latest_version}/openhab-${latest_version}.tar.gz
            else
               echo "Building latest snapshot version"
               wget --quiet \
                    -O openhab.zip \
                    https://ci.openhab.org/job/openHAB3-Distribution/lastSuccessfulBuild/artifact/distributions/openhab/target/*zip*/target.zip
               unzip openhab.zip
               rm openhab.zip
               mv target/openhab-*.tar.gz .
               rm -rf target
            fi
        override-build: |
            tar xf openhab-*.tar.gz -C ${SNAPCRAFT_PART_INSTALL}
            VERSION=$(grep 'openhab-distro' ${SNAPCRAFT_PART_INSTALL}/userdata/etc/version.properties | awk '{print $3}')
            BUILD_NO=$(grep 'build-no' ${SNAPCRAFT_PART_INSTALL}/userdata/etc/version.properties | awk '{print $4}' | cut -c 2-)
            [ -n "$(echo $VERSION | grep SNAPSHOT)" ] && VERSION="${VERSION}-bn${BUILD_NO}"
            snapcraftctl set-version ${VERSION}
            echo "Correcting writable paths"
            sed -i '/-Dopenhab.logdir=${OPENHAB_LOGDIR}/a -Duser.home=${SNAP_DATA}/' $SNAPCRAFT_PART_INSTALL/runtime/bin/setenv
            find  $SNAPCRAFT_PART_INSTALL//runtime/bin/ -type f \
                   -exec sed -i -e 's#${KARAF_HOME}/instances#${SNAP_DATA}/karaf/instances#g' {} \;
            sed -i -e 's#${openhab.home}/addons#${karaf.data}/../addons#g' \
                   $SNAPCRAFT_PART_INSTALL/userdata/etc/org.apache.felix.fileinstall-deploy.cfg

    # dependency stage packages to include in the snap, handle cross compilation support here
    dependencies:
        plugin: nil
        stage-packages:
            - arping
            - libxi6
            - libxrender1
            - libxtst6
            - libxcb1
            - libxext6
            - libxdmcp6
            - libxau6
            - libx11-6
            - zip
            - unzip
            - jq
            - libasound2

    # java run time
    jre:
        plugin: nil
        override-pull: |
          echo "SNAPCRAFT_ARCH_TRIPLET=${SNAPCRAFT_ARCH_TRIPLET}"
          if [ "${SNAPCRAFT_ARCH_TRIPLET}" = "arm-linux-gnueabihf" ]; then
              curl -H "Accept: application/json" "https://api.azul.com/zulu/download/community/v1.0/bundles/?zulu_version=11&ext=tar.gz&os=linux&arch=arm&hw_bitness=32&bundle_type=jdk" | jq -c 'sort_by(.id) | .[] | select(.name | contains("aarch32hf"))' | jq -s '.[-1]' > ${SNAPCRAFT_PART_SRC}/zulu_version.json
          elif [ "${SNAPCRAFT_ARCH_TRIPLET}" = "aarch64-linux-gnu" ]; then
              curl -H "Accept: application/json" "https://api.azul.com/zulu/download/community/v1.0/bundles/latest/?zulu_version=11&ext=tar.gz&os=linux&arch=arm&hw_bitness=64&bundle_type=jdk" | jq . > ${SNAPCRAFT_PART_SRC}/zulu_version.json
          elif [ "${SNAPCRAFT_ARCH_TRIPLET}" = "x86_64-linux-gnu" ]; then
              curl -H "Accept: application/json" "https://api.azul.com/zulu/download/community/v1.0/bundles/latest/?zulu_version=11&ext=tar.gz&os=linux&arch=x86&hw_bitness=64&bundle_type=jdk" | jq . > ${SNAPCRAFT_PART_SRC}/zulu_version.json
          fi
          tar_link=$(jq -r '.url' ${SNAPCRAFT_PART_SRC}/zulu_version.json)
          echo "tar_link=[${tar_link}]"
          wget -O zulu.tar.gz ${tar_link}
        override-build: |
          tar -C ${SNAPCRAFT_PART_INSTALL} -xf zulu.tar.gz --strip 1
          rm -rf ${SNAPCRAFT_PART_INSTALL}/demo \
                 ${SNAPCRAFT_PART_INSTALL}/include \
                 ${SNAPCRAFT_PART_INSTALL}/jmods \
                 ${SNAPCRAFT_PART_INSTALL}/legal \
                 ${SNAPCRAFT_PART_INSTALL}/lib/ct.sym \
                 ${SNAPCRAFT_PART_INSTALL}/lib/libattach.so \
                 ${SNAPCRAFT_PART_INSTALL}/lib/libsaproc.so \
                 ${SNAPCRAFT_PART_INSTALL}/lib/src.zip \
                 ${SNAPCRAFT_PART_INSTALL}/man
          cp ${SNAPCRAFT_PART_BUILD}/zulu_version.json ${SNAPCRAFT_PART_INSTALL}/zulu_version.json
        organize:
          LICENSE: LICENSE_ZULU
          release: release_zulu

    # glue
    glue:
        source: glue
        plugin: dump

    influxdb:
        source: https://github.com/influxdata/influxdb.git
        source-tag: v1.8.0
        build-snaps: ["go"]
        source-depth: 1
        plugin: python
        override-build: |
            export PATH="$SNAPCRAFT_STAGE/bin:$PATH"
            export GOPATH=$(readlink -f $(pwd)/../go)
            export GOIMPORTPATH=$GOPATH/src/github.com/influxdata/influxdb/
            mkdir -p $GOIMPORTPATH
            cp -r ./* $GOIMPORTPATH
            cp -r .git $GOIMPORTPATH
            cd $GOIMPORTPATH
            python build.py --outdir $SNAPCRAFT_PART_INSTALL/bin
            mkdir -p $SNAPCRAFT_PART_INSTALL/conf
            cp etc/config.sample.toml $SNAPCRAFT_PART_INSTALL/conf/influxdb.conf
        stage-packages:
            - libdb5.3-dev
        stage:
            - conf/influxdb.conf
            - bin/influxd
            - bin/influx

build-packages:
    - jq
    - curl
    - software-properties-common
    - wget
    - make
    - ruby
    - ruby-dev
    - autoconf
    - libtool
    - build-essential
    - rpm
    - zip
    - python3
    - python3-boto
    - python-is-python3
    - asciidoc
    - xmlto
    - docbook-xsl
    - unzip
    - libxml2-utils
