name: openhab
version: "0"
version-script: xmllint --xpath '/*[local-name()="project"]/*[local-name()="parent"]/*[local-name()="version"]/text()' parts/openhab/src/pom.xml
summary: openHAB smart home server
description: |
 openHAB - a vendor and technology agnostic open source automation software for your home.
 An image of Ubuntu Core with some USB items added to the gadget snap is available at
 http://people.canonical.com/~okubik/openhab/
 If you would like to add a USB controller or other device, please raise an issue at git
 https://github.com/openhab/openhab-snap/
 webgui is available at user defined port(default is 8080 for http and 8443 for https)
 http://<snap device address>:{specified http port}
 https:///<snap device address>:{specified https port}
 Port settings can be altered by user, refer to:
 $ openhab.help

confinement: strict
grade: stable
base: core18

environment:
    JAVA_HOME:        ${SNAP}/jre
    PATH:             ${SNAP}/jre/bin:${SNAP}/usr/sbin:${SNAP}/usr/bin:${SNAP}/sbin:${SNAP}/bin:${PATH}
apps:
    openhab:
        command: openhab-control karaf server
        stop-command: openhab-control stop
        daemon: simple
        plugs: [home, network, network-bind, serial-port]

    start:
        command: openhab-control karaf
        plugs: [home, network, network-bind]

    clean:
        command: openhab-control karaf clean
        plugs: [home, network, network-bind]

    debug:
        command: openhab-control karaf debug
        plugs: [home, network, network-bind]

    status:
        command: openhab-control status
        plugs: [home, network, network-bind]

    stop:
        command: openhab-control stop
        plugs: [home, network, network-bind]

    client:
        command: openhab-control client
        plugs: [home, network, network-bind]

    help:
        command: openhab-help

parts:
    openhab:
        source: https://github.com/openhab/openhab-distro.git
        source-branch: master
        source-type: git
        plugin: openhab
        build-packages: [libxml2-utils]
        prepare: |
          echo "Checking if there is new tag to build from"
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ "$(git rev-parse @)" = "$(git rev-parse ${LAST_TAG}~)" ]; then \
              echo "Building from tag"; \
              git checkout ${LAST_TAG}; \
              git -C ../src checkout ${LAST_TAG}; \
          fi
        prime:
          - -start*
          - -runtime/bin/*.bat
        install: |
            echo "Correcting writable paths"
            sed -i -e 's#${OPENHAB_HOME}/conf#${SNAP_DATA}/conf#g' \
                   -e 's#${OPENHAB_HOME}/userdata#${SNAP_DATA}/userdata#g' \
                   $SNAPCRAFT_PART_INSTALL/runtime/bin/oh2_dir_layout
            sed -i -e 's#-Dopenhab.logdir=${OPENHAB_LOGDIR}#-Dopenhab.logdir=${OPENHAB_LOGDIR}\n  -Duser.home=${SNAP_DATA}#g' \
                   $SNAPCRAFT_PART_INSTALL/runtime/bin/setenv
            find  $SNAPCRAFT_PART_INSTALL//runtime/bin/ -type f \
                   -exec sed -i -e 's#${KARAF_HOME}/instances#${SNAP_DATA}/karaf/instances#g' {} \;
            sed -i -e 's#${openhab.home}/addons#${karaf.data}/../addons#g' \
                   $SNAPCRAFT_PART_INSTALL/userdata/etc/org.apache.felix.fileinstall-deploy.cfg

    # java run time
    jre:
        plugin: nil
        override-pull: |
          echo "SNAPCRAFT_ARCH_TRIPLET=${SNAPCRAFT_ARCH_TRIPLET}"
          if [ "${SNAPCRAFT_ARCH_TRIPLET}" = "arm-linux-gnueabihf" ]; then
              curl -H "Accept: application/json" "https://api.azul.com/zulu/download/community/v1.0/bundles/?zulu_version=8&ext=tar.gz&os=linux&arch=arm&hw_bitness=32&bundle_type=jdk" | jq -c 'sort_by(.id) | .[] | select(.name | contains("aarch32hf"))' | jq -s '.[-1]' > ${SNAPCRAFT_PART_INSTALL}/zulu_version.json
          elif [ "${SNAPCRAFT_ARCH_TRIPLET}" = "aarch64-linux-gnu" ]; then
              curl -H "Accept: application/json" "https://api.azul.com/zulu/download/community/v1.0/bundles/latest/?zulu_version=8&ext=tar.gz&os=linux&arch=arm&hw_bitness=64&bundle_type=jdk" | jq . > ${SNAPCRAFT_PART_INSTALL}/zulu_version.json
          elif [ "${SNAPCRAFT_ARCH_TRIPLET}" = "x86_64-linux-gnu" ]; then
              curl -H "Accept: application/json" "https://api.azul.com/zulu/download/community/v1.0/bundles/latest/?zulu_version=8&ext=tar.gz&os=linux&arch=x86&hw_bitness=64&bundle_type=jdk" | jq . > ${SNAPCRAFT_PART_INSTALL}/zulu_version.json
          else
              curl -H "Accept: application/json" "https://api.azul.com/zulu/download/community/v1.0/bundles/latest/?zulu_version=8&ext=tar.gz&os=linux&arch=x86&hw_bitness=32&bundle_type=jdk" | jq . > ${SNAPCRAFT_PART_INSTALL}/zulu_version.json
          fi
          tar_link=$(jq -r '.url' ${SNAPCRAFT_PART_INSTALL}/zulu_version.json)
          echo "tar_link=[${tar_link}]"
          wget -O zulu.tar.gz ${tar_link}
          tar -C ${SNAPCRAFT_PART_INSTALL} -xf zulu.tar.gz --strip 1
        stage:
          - -bin
          - -demo
          - -include
          - -lib
          - -man
          - -sample
          - -src.zip
          - -jre/lib/aarch32/client/libjvm.diz
          - -jre/lib/aarch64/server/libjvm.diz
        organize:
          LICENSE: LICENSE_ZULU
          release: release_zulu

    # glue
    glue:
        source: glue
        plugin: dump

build-packages:
    - jq
    - curl
