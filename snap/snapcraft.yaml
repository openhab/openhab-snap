name: openhab
summary: openHAB smart home server
description: |
 openHAB - a vendor and technology agnostic open source automation software for your home.
 An image of Ubuntu Core with some USB items added to the gadget snap is available at
 http://people.canonical.com/~okubik/openhab/
 If you would like to add a USB controller or other device, please raise an issue at git
 https://github.com/openhab/openhab-snap/
 webgui is available at user defined port(default is 8080 for http and 8443 for https)
 http://<snap device address>:{specified http port}
 https:///<snap device address>:{specified https port}
 Port settings can be altered by user, refer to:
 $ openhab.help

confinement: strict
grade: stable
adopt-info: openhab
base: core18

environment:
    JAVA_HOME:        ${SNAP}/jre
    PATH:             ${SNAP}/jre/bin:${SNAP}/usr/sbin:${SNAP}/usr/bin:${SNAP}/sbin:${SNAP}/bin:${PATH}
    LD_LIBRARY_PATH:  ${SNAP_LIBRARY_PATH}:${LD_LIBRARY_PATH}:${SNAP}/lib:${SNAP}/usr/lib:${SNAP}/lib/${SNAPCRAFT_ARCH_TRIPLET}:${SNAP}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}
    OPENHAB_CONF:     ${SNAP_DATA}/conf
    OPENHAB_RUNTIME:  ${SNAP}/runtime
    OPENHAB_USERDATA: ${SNAP_DATA}/userdata
    OPENHAB_LOGDIR:   ${SNAP_DATA}/userdata/logs
    OPENHAB_BACKUPS:  ${SNAP_COMMON}/backups

apps:
    openhab:
        command: bin/openhab-control karaf server
        adapter: none
        stop-command: bin/openhab-control stop
        daemon: simple
        plugs:
            - home
            - network
            - network-bind
            - serial-port
            - raw-usb
            - gpio

    start:
        command: bin/openhab-control karaf
        adapter: none
        plugs:
            - home
            - network
            - network-bind
            - serial-port
            - raw-usb
            - gpio

    karaf:
        command: bin/openhab-control karaf
        adapter: none
        plugs:
            - home
            - network
            - network-bind
            - serial-port
            - raw-usb
            - gpio

    status:
        command: bin/openhab-control status
        adapter: none
        plugs:
            - network

    stop:
        command: bin/openhab-control stop
        adapter: none
        plugs:
            - network

    client:
        command: bin/openhab-control client
        adapter: none
        plugs:
            - network

    backup:
        command: bin/openhab-control backup
        adapter: none
        plugs:
            - home

    restore:
        command: bin/openhab-control restore
        adapter: none
        plugs:
            - home

    help:
        command: bin/openhab-help
        adapter: none

parts:
    openhab:
        source: https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab%2F2.3.0%2Fopenhab-2.3.0.tar.gz
        plugin: nil
        stage:
          - -start*
          - -runtime/bin/*.bat
        organize:
          LICENSE: LICENSE_OPENHAB
        build-packages:
            - wget
        override-pull: |
            wget -O latest_version https://bintray.com/openhab/mvn/openhab-distro/_latestVersion
            version=$(grep \'version\': latest_version | awk '{print $2}' | sed -e "s/'//g" -e 's/,//g')
            echo "determined version:${version}"
            wget -O openhab.tar.gz https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab%2F${version}%2Fopenhab-${version}.tar.gz
            tar -xf openhab.tar.gz
            rm openhab.tar.gz
        override-build: |
            cp -r * ${SNAPCRAFT_PART_INSTALL}
            VERSION=$(grep 'openhab-distro' ${SNAPCRAFT_PART_INSTALL}/userdata/etc/version.properties | awk '{print $3}')
            BUILD_NO=$(grep 'build-no' ${SNAPCRAFT_PART_INSTALL}/userdata/etc/version.properties | awk '{print $4}' | cut -c 2-)
            [ -n "$(echo $VERSION | grep SNAPSHOT)" ] && VERSION="${VERSION}-bn${BUILD_NO}"
            snapcraftctl set-version ${VERSION}
            echo "Correcting writable paths"
            sed -i '/-Dopenhab.logdir=${OPENHAB_LOGDIR}/a -Duser.home=${SNAP_DATA}/' $SNAPCRAFT_PART_INSTALL/runtime/bin/setenv
            find  $SNAPCRAFT_PART_INSTALL//runtime/bin/ -type f \
                   -exec sed -i -e 's#${KARAF_HOME}/instances#${SNAP_DATA}/karaf/instances#g' {} \;
            sed -i -e 's#${openhab.home}/addons#${karaf.data}/../addons#g' \
                   $SNAPCRAFT_PART_INSTALL/userdata/etc/org.apache.felix.fileinstall-deploy.cfg

    # dependency stage packages to include in the snap, handle cross compilation support here
    dependencies:
        plugin: nil
        stage-packages:
            - to armhf:
                - libxi6:armhf
                - libxrender1:armhf
                - libxtst6:armhf
                - libxcb1:armhf
                - libxext6:armhf
                - libxdmcp6:armhf
                - libxau6:armhf
                - libx11-6:armhf
                - zip:armhf
                - jq:armhf
                - libasound2:armhf
            - to arm64:
                - libxi6:arm64
                - libxrender1:arm64
                - libxtst6:arm64
                - libxcb1:arm64
                - libxext6:arm64
                - libxdmcp6:arm64
                - libxau6:arm64
                - libx11-6:arm64
                - zip:arm64
                - jq:arm64
                - libasound2:arm64
            - to i386:
                - libxi6:i386
                - libxrender1:i386
                - libxtst6:i386
                - libxcb1:i386
                - libxext6:i386
                - libxdmcp6:i386
                - libxau6:i386
                - libx11-6:i386
                - zip:i386
                - jq:i386
                - libasound2:i386
            - to amd64:
                - libxi6:amd64
                - libxrender1:amd64
                - libxtst6:amd64
                - libxcb1:amd64
                - libxext6:amd64
                - libxdmcp6:amd64
                - libxau6:amd64
                - libx11-6:amd64
                - zip:amd64
                - jq:amd64
                - libasound2:amd64

    # java run time
    jre:
        plugin: dump
        source:
          - to armhf: http://cdn.azul.com/zulu-embedded/bin/zulu8.33.0.134-jdk1.8.0_192-linux_aarch32hf.tar.gz
          - to arm64: http://cdn.azul.com/zulu-embedded/bin/zulu8.33.0.135-jdk1.8.0_192-linux_aarch64.tar.gz
          - to amd64: https://cdn.azul.com/zulu/bin/zulu8.33.0.1-jdk8.0.192-linux_x64.tar.gz
          - to i386:  https://cdn.azul.com/zulu/bin/zulu8.33.0.1-jdk8.0.192-linux_i686.tar.gz
        stage:
          - -bin
          - -demo
          - -include
          - -lib
          - -man
          - -sample
          - -src.zip
          - -jre/lib/aarch32/client/libjvm.diz
          - -jre/lib/aarch64/server/libjvm.diz
        organize:
          LICENSE: LICENSE_ZULU

    # glue
    glue:
        source: glue
        plugin: dump

